subset$growthrate <- c(rep(NaN, window_size), 3600*diff(subset$lnOD660, lag=window_size)/(900*window_size))
processed_data <- rbind(processed_data, subset)
}
# Add it to the master dataframe
master_df = rbind(master_df, processed_data)
}
# Set target fluorescence depending on strain #tgt_fluor #tgt_expression
master_df<- master_df %>%
mutate(tgt_fluor = case_when(groupID %like% "GFP" ~ GFP,
groupID %like% "MCH" ~ mCherry))
master_df <- master_df %>%
mutate(tgt_expression = case_when(groupID %like% "GFP" ~ gfp_expression,
groupID %like% "MCH" ~ mch_expression))
print(head(master_df))
write.csv(master_df, file = "tidy_raw.csv")
master_df <- read.csv("tidy_raw.csv")
master_df <- master_df %>% group_by(strain, rbs, time)
# Make a dataset that merges the biological replicates (for graphing purposes)   ------------------
mean_df <- master_df %>% group_by(strain, rbs, time)
mean_df <- mean_df %>% dplyr::summarize(GFP = mean(GFP),
mCherry = mean(mCherry),
OD660 = mean(OD660),
tgt_fluor = mean(tgt_fluor),
tgt_expression = mean(tgt_expression),
growthrate = mean(growthrate))
# Find the position with the highest variance growth rates ---------
gfp_data <- master_df %>% filter(strain %like% "GFP")
mch_data <- master_df %>% filter(strain %like% "MCH")
gfp_variance <- data.frame(timepoint = numeric(), variance = numeric())
mch_variance <- data.frame(timepoint = numeric(), variance = numeric())
start <- 1
cutoff <- 12
for (timepoint in unique(gfp_data$time)){
timepoint_subset <- gfp_data %>% filter(time == timepoint)
if (start*60*60 >= timepoint || timepoint >= cutoff*60*60){
variance <- -1
} else{variance <- var(timepoint_subset$OD660)}
gfp_variance[nrow(gfp_variance)+1,] <- c(timepoint, variance)
}
print(gfp_variance)
for (timepoint in unique(mch_data$time)){
timepoint_subset <- mch_data %>% filter(time == timepoint)
if (start*60*60 >= timepoint || timepoint >= cutoff*60*60){
variance <- -1
} else{variance <- var(timepoint_subset$OD660)}
mch_variance[nrow(mch_variance)+1,] <- c(timepoint, variance)
}
gfp_peak_variance <- gfp_variance[which.max(gfp_variance$variance), ]$timepoint
mch_peak_variance <- mch_variance[which.max(mch_variance$variance), ]$timepoint
gfp_time_start <- 11700-900 #gfp_peak_variance-900*1
mch_time_start <- 11700-900 #mch_peak_variance-900*5
gfp_times <- c(gfp_time_start-900*window_size,gfp_time_start)
mch_times <- c(mch_time_start-900*window_size,mch_time_start)
print(gfp_peak_variance/60/60)
print(mch_peak_variance/60/60)
gfp_shift <- 0
mch_shift <- 0
# Graphs of each CDS   --------------------------
plot_theme <- theme(plot.title = element_text(family = "Fira Sans Condensed", colour="white"),
plot.background = element_rect(fill = "#31363B"),
panel.background = element_blank(),
panel.grid.major = element_line(color = "grey70", size = 0.2),
panel.grid.minor = element_line(color = "grey70", size = 0.2),
legend.background = element_blank(),
axis.ticks = element_blank(),
legend.key = element_blank(),
legend.text = element_text(colour = "white"),
legend.title = element_text(colour = "white"),
axis.text.x=element_text(colour="white"),
axis.text.y=element_text(colour="white"),
axis.title.x=element_text(colour="white"),
axis.title.y=element_text(colour="white"),
)
plot_theme <- theme_bw()
color_pallet <- c('black'="#000000",
'orange'='#e69d00',
'skyblue'='#56b4ff',
'bluegreen'='#009e74',
'yellow'='#f0e442',
'blue'='#0071b2',
'vermillion'='#d55c00',
'reddishpurple'='#cc79a7'
) # doi.org/10.1038/nmeth.1618
graph_strain<- function(strain_dataframe_master, strain_dataframe_mean, strain_name){
if (strain_name %like% "GFP"){
t1 <- gfp_times[1]
t3 <- gfp_times[2]
shift_amnt <- gfp_shift
print("gfp")
} else if (strain_name %like% "MCH"){
t1 <- mch_times[1]
t3 <- mch_times[2]
shift_amnt <- mch_shift
print("mch")
} else{
t1 <- 0
t3 <- 0
shift_amnt <- 0
print('neither')
}
p1 <- ggplot() +
geom_line(data=strain_dataframe_master, aes(x = time, y = OD660, color=rbs, group=groupID, alpha = 0.05)) +
geom_line(data=strain_dataframe_mean, aes(x = time, y = OD660, color=rbs), size = 2) +
ggtitle(paste("Growth of", strain_name, "under IPTG Induction")) +
plot_theme + ylab("OD660") +scale_x_time() +
geom_vline(xintercept=t1, linetype='dashed') +
geom_vline(xintercept=t3, linetype='dashed') + scale_color_manual(values=c("#000004", "#51127c", "#b73779", '#fc8961', '#fcfdbf','#cc79a7' )) + theme(legend.position="none") + theme(axis.text=element_text(size=16),
axis.title=element_text(size=20))
p2 <- ggplot() +
geom_line(data=strain_dataframe_master, aes(x = time, y = tgt_fluor, color=rbs, group=groupID, alpha = 0.05)) +
geom_line(data=strain_dataframe_mean, aes(x = time, y = tgt_fluor, color=rbs), size = 2) +
ggtitle(paste("Fluorescence of ", strain_name, "under IPTG Induction")) +
plot_theme + ylab("AU") +scale_x_time() +
geom_vline(xintercept=t1-900*shift_amnt, linetype='dashed') +
geom_vline(xintercept=t3-900*shift_amnt, linetype='dashed') + scale_color_manual(values=c("#000004", "#51127c", "#b73779", '#fc8961', '#fcfdbf','#cc79a7' )) + theme(legend.position="none")+theme(axis.text=element_text(size=16),
axis.title=element_text(size=20))
p3 <- ggplot()+
geom_line(data=strain_dataframe_master, aes(x = time, y = growthrate, color=rbs, group=groupID, alpha = 0.05)) +
geom_line(data=strain_dataframe_mean, aes(x = time, y = growthrate, color=rbs), size = 2) +
ggtitle(paste("Growth Rate of ", strain_name, "under IPTG Induction")) +
plot_theme + ylab("Growth Rate") +scale_x_time() +
geom_vline(xintercept=t3, linetype='dashed') + scale_color_manual(values=c("#000004", "#51127c", "#b73779", '#fc8961', '#fcfdbf','#cc79a7' )) + theme(legend.position="none") +theme(axis.text=element_text(size=16),
axis.title=element_text(size=20))
p4 <- ggplot()+
geom_line(data=strain_dataframe_master, aes(x = time, y = tgt_expression, color=rbs, group=groupID, alpha = 0.05)) +
geom_line(data=strain_dataframe_mean, aes(x = time, y = tgt_expression, color=rbs), size = 2) +
ggtitle(paste("Expression of ", strain_name, "under IPTG Induction")) +
plot_theme + ylab("AU/second") +scale_x_time() +
geom_vline(xintercept=t3-900*shift_amnt, linetype='dashed') + scale_color_manual(values=c("#000004", "#51127c", "#b73779", '#fc8961', '#fcfdbf','#cc79a7' )) +theme(axis.text=element_text(size=16),
axis.title=element_text(size=20))
show(p1 + p2 + p3 + p4)
}
graph_strain_grey<- function(strain_dataframe_master, strain_dataframe_mean, strain_name){
if (strain_name %like% "GFP"){
t1 <- gfp_times[1]
t3 <- gfp_times[2]
shift_amnt <- gfp_shift
print("gfp")
} else if (strain_name %like% "MCH"){
t1 <- mch_times[1]
t3 <- mch_times[2]
shift_amnt <- mch_shift
print("mch")
} else{
t1 <- 0
t3 <- 0
shift_amnt <- 0
print('neither')
}
p1 <- ggplot() +
geom_line(data=strain_dataframe_master, aes(x = time, y = OD660, group=groupID, alpha = 0.05)) +
ggtitle(paste("Growth of", strain_name, "under IPTG Induction")) +
plot_theme + ylab("OD660") +scale_x_time() +
geom_vline(xintercept=t1, linetype='dashed') +
geom_vline(xintercept=t3, linetype='dashed') +theme(axis.text=element_text(size=16),
axis.title=element_text(size=20))
p2 <- ggplot() +
geom_line(data=strain_dataframe_master, aes(x = time, y = tgt_fluor, group=groupID, alpha = 0.05)) +
ggtitle(paste("Fluorescence of ", strain_name, "under IPTG Induction")) +
plot_theme + ylab("AU") +scale_x_time() +
geom_vline(xintercept=t1-900*shift_amnt, linetype='dashed') +
geom_vline(xintercept=t3-900*shift_amnt, linetype='dashed') +theme(axis.text=element_text(size=16),
axis.title=element_text(size=20))
p3 <- ggplot()+
geom_line(data=strain_dataframe_master, aes(x = time, y = growthrate, group=groupID, alpha = 0.05)) +
ggtitle(paste("Growth Rate of ", strain_name, "under IPTG Induction")) +
plot_theme + ylab("Growth Rate") +scale_x_time() +
geom_vline(xintercept=t3, linetype='dashed') +theme(axis.text=element_text(size=16),
axis.title=element_text(size=20))
p4 <- ggplot()+
geom_line(data=strain_dataframe_master, aes(x = time, y = tgt_expression, group=groupID, alpha = 0.05)) +
ggtitle(paste("Expression of ", strain_name, "under IPTG Induction")) +
plot_theme + ylab("AU/second") +scale_x_time() +
geom_vline(xintercept=t3-900*shift_amnt, linetype='dashed')  +theme(axis.text=element_text(size=16),
axis.title=element_text(size=20))
show(p1 + p2 + p3 + p4)
}
for (cds in unique(master_df$strain)){
graph_master <- master_df %>% filter(strain==cds)
graph_mean <- mean_df %>% filter(strain==cds)
graph_strain(graph_master,
graph_mean,
cds)
Sys.sleep(2)
}
graph_strain_grey(master_df %>% filter(strain %like% "GFP"),
mean_df %>% filter(strain %like% "GFP"),
"All GFP")
graph_strain_grey(master_df %>% filter(strain %like% "MCH"),
mean_df %>% filter(strain %like% "MCH"),
"All MCH")
# Find the peak expression values for each sample
peaks <- data.frame()
for (sample in unique(master_df$groupID)){
graph_master <- master_df %>% filter(groupID == sample)
expression_peak <- graph_master[which.max(graph_master$tgt_expression),]
peaks <- rbind(peaks, expression_peak)
}
gfp_peaks <- peaks %>% filter(strain %like% "GFP")
mch_peaks <- peaks %>% filter(strain %like% "MCH")
plot = ggplot() +
geom_histogram(data=gfp_peaks, aes(x=rbs, y=time, fill=strain, group=strain), position="dodge",
stat= "summary",
fun = "mean") +
geom_point(data=gfp_peaks, aes(x=rbs, y=time, group=strain), position=position_dodge(width=1),
) +
theme_bw() + scale_y_time() + xlab("Predicted RBS Strength") + ylab("Time to Peak Induction") +
theme(text = element_text(size = 20),
axis.text.x = element_text(angle = 90, hjust = 1))
show(plot)
plot = ggplot() +
geom_histogram(data=mch_peaks, aes(x=rbs, y=time, fill=strain, group=strain), position="dodge",
stat= "summary",
fun = "mean") +
geom_point(data=mch_peaks, aes(x=rbs, y=time, group=strain), position=position_dodge(width=1),
) +
theme_bw() + scale_y_time() + xlab("Predicted RBS Strength") + ylab("Time to Peak Induction") +
theme(text = element_text(size = 20),
axis.text.x = element_text(angle = 90, hjust = 1))
show(plot)
ggsave(file="mCh_peaks.svg", plot=plot)
p5 <- ggplot() +
geom_point(data= gfp_peaks,
aes(x = tgt_expression, y = growthrate, color=strain, group=groupID), size=5) +
ggtitle(paste("Burden of GFP expression")) +
plot_theme + ylab("Growth Rate") + xlab("Expression") +theme(axis.text=element_text(size=16),
axis.title=element_text(size=20))
#p5
p6 <- ggplot() +
geom_point(data= mch_peaks,
aes(x = tgt_expression, y = growthrate, color=strain, group=groupID), size=5) +
ggtitle(paste("Burden of mCherry expression")) +
plot_theme + ylab("Growth Rate") + xlab("Expression") +theme(axis.text=element_text(size=16),
axis.title=element_text(size=20))
#p6
df_exponential_averages <- data.frame(matrix(ncol = 6, nrow = 0))
colnames(df_exponential_averages) <- c("ID", "strain", "rbs", "growth_rate_od", "output",  "experiment")
IDs <- unique(master_df$groupID)
end_of_experiment <- max(master_df$time)
for (ID_tgt in IDs){
if (ID_tgt %like% "GFP"){
t1 <- gfp_times[1]
t3 <- gfp_times[2]
shift_amnt <- gfp_shift
} else if (ID_tgt %like% "MCH"){
t1 <- mch_times[1]
t3 <- mch_times[2]
shift_amnt <- mch_shift
} else{
t1 <- 0
t3 <- 0
shift_amnt <- 0
}
t1_data_OD660 <- filter(master_df, time == t1, groupID == ID_tgt)
t3_data_OD660 <- filter(master_df, time == t3, groupID == ID_tgt)
t1_data_fluor <- filter(master_df, time == t1-shift_amnt*900, groupID == ID_tgt)
t3_data_fluor <- filter(master_df, time == t3-shift_amnt*900, groupID == ID_tgt)
growth_rate_OD660 = 3600*(log(t3_data_OD660[1, "OD660"]) - log(t1_data_OD660[1, "OD660"]))/(t3_data_OD660[1, "time"] - t1_data_OD660[1, "time"])
output_data = 3600*(t3_data_fluor[1, "tgt_fluor"] - t1_data_fluor[1, "tgt_fluor"])/(t3_data_fluor[1, "time"] - t1_data_fluor[1, "time"])
df_exponential_averages[nrow(df_exponential_averages) + 1,] = c(ID_tgt,
t1_data_OD660$strain[1],
t1_data_OD660$rbs[1],
growth_rate_OD660,
output_data,
t1_data_OD660$experiment[1])
}
df_exponential_averages$experiment <- as.character(df_exponential_averages$experiment)
gfp_df_exponential_averages <- df_exponential_averages %>% filter(strain %like% "GFP")
mch_df_exponential_averages <- df_exponential_averages %>% filter(strain %like% "MCH")
# ----------- Linear regressions with fixed B
linreg_decent_fixed_b <- function(x_column, y_column, categories) {
reg_df <- data.frame(x=x_column, y=y_column, species = categories)
model <- lm(y~x:species, data=reg_df )
return(model)
}
linreg_decent_fixed_b_coef <- function(x_column, y_column, categories) {
regression <- linreg_decent_fixed_b(x_column, y_column, categories)
coefficients <- data.frame(b=rep(regression$coefficients[1], length(unique(categories))),
m=regression$coefficients[-1],
strain=sort(unique(categories)))
return(coefficients)
}
# Performing regression on GFP
gfp_coefficients <- linreg_decent_fixed_b_coef(gfp_df_exponential_averages$output,
gfp_df_exponential_averages$growth_rate_od,
gfp_df_exponential_averages$strain)
gfp_model <- linreg_decent_fixed_b(gfp_df_exponential_averages$output,
gfp_df_exponential_averages$growth_rate_od,
gfp_df_exponential_averages$strain)
p7 <- ggplot() +
geom_point(data= gfp_df_exponential_averages,
aes(x = output, y = growth_rate_od, color=strain, size=3, group=ID)) +
ggtitle(paste("Burden of GFP expression")) +
geom_abline(data=gfp_coefficients, aes(intercept=b, slope=m, colour=strain)) +
plot_theme + ylab("Growth Rate") + xlab("Expression") + scale_color_manual(values=c( "#fde725", "#35b779", "#31688e", '#440154', '#000000'))  +theme(axis.text=element_text(size=16),
axis.title=element_text(size=20))
p7
# Performing regression on mCherry
mch_coefficients <- linreg_decent_fixed_b_coef(mch_df_exponential_averages$output,
mch_df_exponential_averages$growth_rate_od,
mch_df_exponential_averages$strain)
mch_model <- linreg_decent_fixed_b(mch_df_exponential_averages$output,
mch_df_exponential_averages$growth_rate_od,
mch_df_exponential_averages$strain)
p8 <- ggplot() +
geom_point(data= mch_df_exponential_averages,
aes(x = output, y = growth_rate_od, color=strain, size=3, group=ID)) +
ggtitle(paste("Burden of mCherry expression")) +
plot_theme + ylab("Growth Rate") + xlab("Expression") + scale_color_manual(values=c("#fde725", "#5ec962", "#21918c", '#3b528b', '#440154')) + ylim(0, 0.8) +
geom_abline(data=mch_coefficients, aes(intercept=b, slope=m, colour=strain))+theme(axis.text=element_text(size=16),
axis.title=element_text(size=20))
p82 <- ggplot(mch_coefficients, aes(x=strain, y=abs(m), fill=strain)) +
geom_bar(stat = "identity") + theme_bw() +
scale_fill_manual(values=c( "#fde725", "#5ec962", "#21918c", '#3b528b', '#440154'))
p8 + p82
# Individual growth rate curves
plot_growth <- function(strain_name){
filtered_master <- master_df %>% filter(groupID %like% strain_name)
return(ggplot() +
geom_line(data=filtered_master, aes(x = time, y = OD660, group=groupID, alpha = 0.05)) +
plot_theme+scale_x_time(breaks = scales::breaks_width("2 hours"), labels=NULL, limits=c(0, 900*4*8)) +
geom_vline(xintercept=t1, linetype='dashed') +
geom_vline(xintercept=t3, linetype='dashed')  +
xlab("") + ylab("") + scale_y_continuous(limits = c(0, 1), labels=NULL) +
theme(legend.position="none") + theme(axis.text=element_text(size=16), axis.title=element_text(size=20)))}
G10R25 <- plot_growth("GFP10 R0.25")
G10R50 <- plot_growth("GFP10 R0.5")
G10R1 <- plot_growth("GFP10 R1")
G10R2 <- plot_growth("GFP10 R2")
G10R4 <- plot_growth("GFP10 R4")
G25R25 <- plot_growth("GFP25 R0.25")
G25R50 <- plot_growth("GFP25 R0.5")
G25R1 <- plot_growth("GFP25 R1")
G25R2 <- plot_growth("GFP25 R2")
G25R4 <- plot_growth("GFP25 R4")
G50R25 <- plot_growth("GFP50 R0.25")
G50R50 <- plot_growth("GFP50 R0.5")
G50R1 <- plot_growth("GFP50 R1")
G50R2 <- plot_growth("GFP50 R2")
G50R4 <- plot_growth("GFP50 R4")
G75R25 <- plot_growth("GFP75 R0.25")
G75R50 <- plot_growth("GFP75 R0.5")
G75R1 <- plot_growth("GFP75 R1")
G75R2 <- plot_growth("GFP75 R2")
G75R4 <- plot_growth("GFP75 R4")
G90R25 <- plot_growth("GFP90 R0.25")
G90R50 <- plot_growth("GFP90 R0.5")
G90R1 <- plot_growth("GFP90 R1")
G90R2 <- plot_growth("GFP90 R2")
G90R4 <- plot_growth("GFP90 R4")
grid <- (G10R25 | G10R50 | G10R1 | G10R2 | G10R4)
(G25R25 | G25R50 | G25R1 | G25R2 | G25R4)/
(G50R25 | G50R50 | G50R1 | G50R2 | G50R4)/
(G75R25 | G75R50 | G75R1 | G75R2 | G75R4)/
(G90R25 | G90R50 | G90R1 | G90R2 | G90R4)
M10R25 <- plot_growth("MCH10 R0.25") + ylab("10%") + ggtitle("RBS0.25") + scale_y_continuous(limits = c(0, 1))
M10R50 <- plot_growth("MCH10 R0.5")  + ggtitle("RBS0.50")
M10R1 <- plot_growth("MCH10 R1")  + ggtitle("RBS1")
M10R2 <- plot_growth("MCH10 R2")  + ggtitle("RBS2")
M10R4 <- plot_growth("MCH10 R4")   + ggtitle("RBS4")
M25R25 <- plot_growth("MCH25 R0.25") + ylab("25%") + scale_y_continuous(limits = c(0, 1))
M25R50 <- plot_growth("MCH25 R0.5")
M25R1 <- plot_growth("MCH25 R1")
M25R2 <- plot_growth("MCH25 R2")
M25R4 <- plot_growth("MCH25 R4")
M50R25 <- plot_growth("MCH50 R0.25") + ylab("50%") +  scale_y_continuous(limits = c(0, 1))
M50R50 <- plot_growth("MCH50 R0.5")
M50R1 <- plot_growth("MCH50 R1")
M50R2 <- plot_growth("MCH50 R2")
M50R4 <- plot_growth("MCH50 R4")
M75R25 <- plot_growth("MCH75 R0.25") + ylab("75%") + scale_y_continuous(limits = c(0, 1))
M75R50 <- plot_growth("MCH75 R0.5")
M75R1 <- plot_growth("MCH75 R1")
M75R2 <- plot_growth("MCH75 R2")
M75R4 <- plot_growth("MCH75 R4")
M90R25 <- plot_growth("MCH90 R0.25") +scale_x_time(breaks = scales::breaks_width("2 hours"), limits=c(0, 900*4*8), labels=label_time(format = "%H"))  + ylab("90%") + scale_y_continuous(limits = c(0, 1))
M90R50 <- plot_growth("MCH90 R0.5") +scale_x_time(breaks = scales::breaks_width("2 hours"), limits=c(0, 900*4*8), labels=label_time(format = "%H"))
M90R1 <- plot_growth("MCH90 R1") +scale_x_time(breaks = scales::breaks_width("2 hours"), limits=c(0, 900*4*8), labels=label_time(format = "%H"))
M90R2 <- plot_growth("MCH90 R2") +scale_x_time(breaks = scales::breaks_width("2 hours"), limits=c(0, 900*4*8), labels=label_time(format = "%H"))
M90R4 <- plot_growth("MCH90 R4") +scale_x_time(breaks = scales::breaks_width("2 hours"), limits=c(0, 900*4*8), labels=label_time(format = "%H"))
grid <- (M10R25 | M10R50 | M10R1 | M10R2 | M10R4)/
(M25R25 | M25R50 | M25R1 | M25R2 | M25R4)/
(M50R25 | M50R50 | M50R1 | M50R2 | M50R4)/
(M75R25 | M75R50 | M75R1 | M75R2 | M75R4)/
(M90R25 | M90R50 | M90R1 | M90R2 | M90R4)
grid
# Individual Fluroescence Curves
plot_fluor <- function(strain_name){
filtered_master <- master_df %>% filter(groupID %like% strain_name)
return(
ggplot() +
geom_line(data=filtered_master, aes(x = time, y = tgt_fluor, group=groupID, alpha = 0.05)) +
scale_x_time(breaks = scales::breaks_width("2 hours"), labels=NULL, limits=c(0, 900*4*8)) +
geom_vline(xintercept=t1-900*shift_amnt, linetype='dashed') +
geom_vline(xintercept=t3-900*shift_amnt, linetype='dashed') + theme_bw() +
theme(axis.text=element_text(size=16), axis.title=element_text(size=20), legend.position="none")+
scale_y_continuous(limits = c(0, 16000), labels=NULL) + xlab("") + ylab("")
)}
G10R25 <- plot_fluor("GFP10 R0.25")
G10R50 <- plot_fluor("GFP10 R0.5")
G10R1 <- plot_fluor("GFP10 R1")
G10R2 <- plot_fluor("GFP10 R2")
G10R4 <- plot_fluor("GFP10 R4")
G25R25 <- plot_fluor("GFP25 R0.25")
G25R50 <- plot_fluor("GFP25 R0.5")
G25R1 <- plot_fluor("GFP25 R1")
G25R2 <- plot_fluor("GFP25 R2")
G25R4 <- plot_fluor("GFP25 R4")
G50R25 <- plot_fluor("GFP50 R0.25")
G50R50 <- plot_fluor("GFP50 R0.5")
G50R1 <- plot_fluor("GFP50 R1")
G50R2 <- plot_fluor("GFP50 R2")
G50R4 <- plot_fluor("GFP50 R4")
G75R25 <- plot_fluor("GFP75 R0.25")
G75R50 <- plot_fluor("GFP75 R0.5")
G75R1 <- plot_fluor("GFP75 R1")
G75R2 <- plot_fluor("GFP75 R2")
G75R4 <- plot_fluor("GFP75 R4")
G90R25 <- plot_fluor("GFP90 R0.25")
G90R50 <- plot_fluor("GFP90 R0.5")
G90R1 <- plot_fluor("GFP90 R1")
G90R2 <- plot_fluor("GFP90 R2")
G90R4 <- plot_fluor("GFP90 R4")
grid <- (G10R25 | G10R50 | G10R1 | G10R2 | G10R4)
(G25R25 | G25R50 | G25R1 | G25R2 | G25R4)/
(G50R25 | G50R50 | G50R1 | G50R2 | G50R4)/
(G75R25 | G75R50 | G75R1 | G75R2 | G75R4)/
(G90R25 | G90R50 | G90R1 | G90R2 | G90R4)
M10R25 <- plot_fluor("MCH10 R0.25") + ylab("10%") + ggtitle("RBS0.25") + scale_y_continuous(limits = c(0, 16000))
M10R50 <- plot_fluor("MCH10 R0.5")  + ggtitle("RBS0.50")
M10R1 <- plot_fluor("MCH10 R1")  + ggtitle("RBS1")
M10R2 <- plot_fluor("MCH10 R2")  + ggtitle("RBS2")
M10R4 <- plot_fluor("MCH10 R4")   + ggtitle("RBS4")
M25R25 <- plot_fluor("MCH25 R0.25") + ylab("25%") + scale_y_continuous(limits = c(0, 16000))
M25R50 <- plot_fluor("MCH25 R0.5")
M25R1 <- plot_fluor("MCH25 R1")
M25R2 <- plot_fluor("MCH25 R2")
M25R4 <- plot_fluor("MCH25 R4")
M50R25 <- plot_fluor("MCH50 R0.25") + ylab("50%") +  scale_y_continuous(limits = c(0, 16000))
M50R50 <- plot_fluor("MCH50 R0.5")
M50R1 <- plot_fluor("MCH50 R1")
M50R2 <- plot_fluor("MCH50 R2")
M50R4 <- plot_fluor("MCH50 R4")
M75R25 <- plot_fluor("MCH75 R0.25") + ylab("75%") + scale_y_continuous(limits = c(0, 16000))
M75R50 <- plot_fluor("MCH75 R0.5")
M75R1 <- plot_fluor("MCH75 R1")
M75R2 <- plot_fluor("MCH75 R2")
M75R4 <- plot_fluor("MCH75 R4")
M90R25 <- plot_fluor("MCH90 R0.25") +scale_x_time(breaks = scales::breaks_width("2 hours"), limits=c(0, 900*4*8), labels=label_time(format = "%H"))  + ylab("90%") + scale_y_continuous(limits = c(0, 16000))
M90R50 <- plot_fluor("MCH90 R0.5") +scale_x_time(breaks = scales::breaks_width("2 hours"), limits=c(0, 900*4*8), labels=label_time(format = "%H"))
M90R1 <- plot_fluor("MCH90 R1") +scale_x_time(breaks = scales::breaks_width("2 hours"), limits=c(0, 900*4*8), labels=label_time(format = "%H"))
M90R2 <- plot_fluor("MCH90 R2") +scale_x_time(breaks = scales::breaks_width("2 hours"), limits=c(0, 900*4*8), labels=label_time(format = "%H"))
M90R4 <- plot_fluor("MCH90 R4") +scale_x_time(breaks = scales::breaks_width("2 hours"), limits=c(0, 900*4*8), labels=label_time(format = "%H"))
grid <- (M10R25 | M10R50 | M10R1 | M10R2 | M10R4)/
(M25R25 | M25R50 | M25R1 | M25R2 | M25R4)/
(M50R25 | M50R50 | M50R1 | M50R2 | M50R4)/
(M75R25 | M75R50 | M75R1 | M75R2 | M75R4)/
(M90R25 | M90R50 | M90R1 | M90R2 | M90R4)
grid
#dev.off()
#show_wells <- function(tgtcds, tgtrbs, well_placements){
#  df_96well <- data.frame(x = rep(0, 96),
#                          y = rep(0, 96),
#                          name = rep('well', 96))
#
#  columns <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
#  rows <- c(1, 2, 3, 4, 5, 6, 7, 8)
#  rownames <- c('H', 'G', 'F', 'E', 'D', 'C', 'B', 'A')
#
#  well_dictionary_x <- c()
#
#  y_coord = 0
#  counter = 0
#  for (row in rows){
#    y_coord <- y_coord + 1
#    x_coord = 0
#    for (column in columns){
#      counter <- counter + 1
#      x_coord <- x_coord + 1
#      name <- paste(rownames[row], column, sep="")
#      df_96well[counter, ] <- c(x_coord, y_coord, name)
#    }
#  }
#  data_of_interest <- well_placements %>% filter(cds==tgtcds, rbs==tgtrbs)
#  print(data_of_interest)
#
#  data_x <- c()
#  data_y <- c()
#  data_experiment <- c()
#
#  for (row in 1:nrow(data_of_interest)){
#    data_well <- data_of_interest[row, "well"]
#    well_position <- df_96well %>% filter(name == data_well)
#    data_x <- c(data_x, well_position[1, 'x'])
#    data_y <- c(data_y, well_position[1, 'y'])
#    data_experiment <- c(data_experiment, data_of_interest[row, 'experiment'])
#  }
#
#  converted_positions <- data.frame(x = data_x, y = data_y, experiment=data_experiment)
#
#  df_96well$x <- as.numeric(df_96well$x)
#  df_96well$y <- as.numeric(df_96well$y)
#
#  converted_positions$x <- as.numeric(converted_positions$x)
#  converted_positions$y <- as.numeric(converted_positions$y)
#
#  ggplot() + geom_point(df_96well, mapping=aes(x = x, y = y), size=25, fill='white', color='black', shape = 21) +
#    geom_point(converted_positions, mapping=aes(x=x, y=y, color=experiment), size=10, alpha=0.2) + theme_bw()
#
#}#
#
#show_wells('MCH50', 'RBS4', well_placements)
